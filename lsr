import java.util.*;

class LSR {
    private int[][] graph;
    private int numNodes;
    private static final int INF = Integer.MAX_VALUE;

    public LSR(int numNodes) {
        this.numNodes = numNodes;
        graph = new int[numNodes][numNodes];
        
        for (int i = 0; i < numNodes; i++) {
            for (int j = 0; j < numNodes; j++) {
                if (i == j) {
                    graph[i][j] = 0;
                } else {
                    graph[i][j] = INF;
                }
            }
        }
    }

    public void addLink(int node1, int node2, int cost) {
        graph[node1][node2] = cost;
        graph[node2][node1] = cost;
    }

    public void dijkstra(int source) {
        int[] dist = new int[numNodes];
        boolean[] visited = new boolean[numNodes];
        int[] prev = new int[numNodes];

        Arrays.fill(dist, INF);
        dist[source] = 0;
        Arrays.fill(prev, -1);

        for (int i = 0; i < numNodes; i++) {
            int u = minDistance(dist, visited);
            visited[u] = true;

            for (int v = 0; v < numNodes; v++) {
                if (!visited[v] && graph[u][v] != INF && dist[u] != INF &&
                    dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                    prev[v] = u;
                }
            }
        }

        printSolution(dist, prev, source);
    }

    private int minDistance(int[] dist, boolean[] visited) {
        int min = INF;
        int minIndex = -1;

        for (int v = 0; v < numNodes; v++) {
            if (!visited[v] && dist[v] < min) {
                min = dist[v];
                minIndex = v;
            }
        }
        return minIndex;
    }

    private void printSolution(int[] dist, int[] prev, int source) {
        for (int i = 0; i < numNodes; i++) {
            if (i != source) {
                System.out.print("To Node " + i + ": ");
                printPath(prev, i);
                System.out.println("Distance: " + dist[i]);
            }
        }
    }

    private void printPath(int[] prev, int j) {
        if (prev[j] == -1) {
            return;
        }
        printPath(prev, prev[j]);
        System.out.print(j + " ");
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LSR lsr = new LSR(5);

        lsr.addLink(0, 1, 10);
        lsr.addLink(0, 2, 20);
        lsr.addLink(1, 2, 5);
        lsr.addLink(1, 3, 10);
        lsr.addLink(2, 3, 5);
        lsr.addLink(3, 4, 2);

        lsr.dijkstra(0);
        scanner.close();
    }
}
