import java.util.Arrays;

class Edge {
    int source, destination, weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }
}

public class BellmanFord {

    private int vertices; 
    private int edges; 
    private Edge[] edgeList; 

    public BellmanFord(int vertices, int edges) {
        this.vertices = vertices;
        this.edges = edges;
        edgeList = new Edge[edges];
    }

    public void addEdge(int index, int source, int destination, int weight) {
        edgeList[index] = new Edge(source, destination, weight);
    }

    public void bellmanFord(int source) {
        // Step 1: Initialize distances from source to all vertices as infinite
        int[] distances = new int[vertices];
        Arrays.fill(distances, Integer.MAX_VALUE);
        distances[source] = 0;

        
        for (int i = 1; i < vertices; i++) {
            for (Edge edge : edgeList) {
                if (distances[edge.source] != Integer.MAX_VALUE 
                        && distances[edge.source] + edge.weight < distances[edge.destination]) {
                    distances[edge.destination] = distances[edge.source] + edge.weight;
                }
            }
        }

        // Step 3: Check for negative weight cycles
        for (Edge edge : edgeList) {
            if (distances[edge.source] != Integer.MAX_VALUE 
                    && distances[edge.source] + edge.weight < distances[edge.destination]) {
                System.out.println("Graph contains a negative weight cycle");
                return;
            }
        }

        printSolution(distances, source);
    }

    private void printSolution(int[] distances, int source) {
        System.out.println("Vertex\tDistance from Source " + source);
        for (int i = 0; i < vertices; i++) {
            System.out.println(i + "\t" + (distances[i] == Integer.MAX_VALUE ? "INF" : distances[i]));
        }
    }

    public static void main(String[] args) {
        int vertices = 5; 
        int edges = 8;    

        BellmanFord graph = new BellmanFord(vertices, edges);

        
        graph.addEdge(0, 0, 1, -1);
        graph.addEdge(1, 0, 2, 4);
        graph.addEdge(2, 1, 2, 3);
        graph.addEdge(3, 1, 3, 2);
        graph.addEdge(4, 1, 4, 2);
        graph.addEdge(5, 3, 2, 5);
        graph.addEdge(6, 3, 1, 1);
        graph.addEdge(7, 4, 3, -3);

        int source = 0; // Starting vertex
        graph.bellmanFord(source);
    }
}
